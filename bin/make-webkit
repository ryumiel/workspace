#!/usr/bin/env python

from build_config import ConfigHelper
from datetime import timedelta
from subprocess import call
from subprocess import check_output
import atexit
import multiprocessing
import os.path
import subprocess
import sys
import time

startTime = time.time()
config_helper = ConfigHelper()

def ensureBuildDir(options):
    target_dir = config_helper.get_webkit_dir(options, True)

    if target_dir is None:
      print "Error: Invalid build dir"
      sys.exit(2)

    if not os.path.exists(target_dir):
        os.makedirs(target_dir)
    return target_dir

def jhbuildCmd():
    return ["jhbuild", "-f", config_helper.jhbuildrc, "run"]

def runCMake(options):
    working_dir = ensureBuildDir(options)
    if (os.path.isfile(os.path.join(working_dir,"build.ninja"))):
      return

    print "Regenerating cmake."
    if options.wpe:
      port = "-DPORT=WPE"
      options.use_gles = True
    else:
      port = "-DPORT=GTK"

    webkit_src_dir = config_helper.get_source_dir(options.wpe)

    cmakeargs = [port, "-GNinja", "-DDEVELOPER_MODE=ON"]

    if not options.wpe:
      cmakeargs.append("-DENABLE_INTROSPECTION=OFF")
      cmakeargs.append("-DENABLE_API_TESTS=OFF")

      if options.use_gles:
        cmakeargs.append("-DENABLE_GLES2=ON")
        cmakeargs.append("-DENABLE_ACCELERATED_2D_CANVAS=OFF")
      elif not options.use_gles:
        cmakeargs.append("-DENABLE_GLES2=OFF")
        cmakeargs.append("-DENABLE_ACCELERATED_2D_CANVAS=ON")

      if options.disable_gstgl:
        cmakeargs.append("-DUSE_GSTREAMER_GL=OFF")
      elif not options.disable_gstgl:
        cmakeargs.append("-DUSE_GSTREAMER_GL=ON")

    if options.debug:
        cmakeargs.append("-DCMAKE_BUILD_TYPE=Debug")
        cmakeargs.append("-DMAX_PARALLEL_LINK_JOBS=4")
    else:
        cmakeargs.append("-DCMAKE_BUILD_TYPE=Release")

    cmakeargs.append("-DCMAKE_EXPORT_COMPILE_COMMANDS=ON")

    cmakeargs.append("-DCMAKE_INSTALL_PREFIX=" + config_helper.install_dir)
    cmakeargs.append("-DCMAKE_INSTALL_LIBDIR=lib")

    os.chdir(working_dir)
    cmakeCommand = jhbuildCmd() + ["cmake", webkit_src_dir] + cmakeargs
    call(cmakeCommand)

def installWebKitGtk(options):
    working_dir = ensureBuildDir(options)
    os.chdir(working_dir)
    installCommand = jhbuildCmd() + ["cmake", "-P", working_dir + '/cmake_install.cmake']
    call(installCommand)

def buildWebKitGtk(options):
    try:
      iceccd_active_status = check_output(["/usr/bin/systemctl", "is-active", "iceccd.service"]).rstrip();
    except subprocess.CalledProcessError, e:
      iceccd_active_status = "unknown"

    print "icecc : " + iceccd_active_status
    if iceccd_active_status == "active":
      isIceccdActive = True
    elif iceccd_active_status == "unknown":
      isIceccdActive = False
    else:
      print "Error: Cannot determine the status of iceccd"
      exit(0)

    set_build_environment(options.clang, isIceccdActive)
    if options.jobs == 0:
      if isIceccdActive:
        numOfJob = 37
      else:
        numOfJob = multiprocessing.cpu_count()
    else:
      numOfJob = options.jobs

    runCMake(options)
    working_dir = ensureBuildDir(options)
    os.chdir(working_dir)

    buildCommand = jhbuildCmd() + ["ninja-build", "-j" + str(numOfJob)]
    if options.fast:
      minimumTargets = ["MiniBrowser", "WebKitTestRunner", "libTestNetscapePlugIn.so", "libTestRunnerInjectedBundle.so", "lib/libwebkit2gtkinjectedbundle.so", "WebKitWebProcess", "WebKitDatabaseProcess", "WebKitPluginProcess", "WebKitPluginProcess2", "WebKitNetworkProcess", "ImageDiff", "jsc", "LLIntOffsetsExtractor"]
      buildCommand = buildCommand + minimumTargets

    build_start_time = time.time()
    build_return = call(buildCommand)
    build_time = round(time.time() - build_start_time)
    print "WebKit build dir: " + working_dir
    print "WebKit build options --"
    print options
    print "Elapsed build time: " + str(timedelta(seconds=build_time))
    if build_return == 0:
      return True
    return False

def buildFinished():
    elapsedTime = round(time.time() - startTime)
    if elapsedTime > 30:
      call(["/usr/bin/aplay", "-q", config_helper.build_finished_sound_file])

def set_build_environment(isClang, isIcecc):
    if isClang:
      os.environ["CC"]="clang"
      os.environ["CXX"]="clang++"
      os.environ["CCACHE_CPP2"]="yes"

    if isIcecc:
      os.environ["CCACHE_PREFIX"]="icecc"
      os.environ["CCACHE_DISABLE"]="1"
      if isClang:
        os.environ["ICECC_VERSION"]=config_helper.config['icecc_clang_version']
        os.environ["ICECC_CLANG_REMOTE_CPP"]="1"
      else:
        os.environ["ICECC_VERSION"]=config_helper.config['icecc_gcc_version']

def main(argv):
    config_helper.ensure_icecc_clang_env()
    config_helper.ensure_icecc_gcc_env()

    argParser = config_helper.get_argument_parser()
    options = argParser.parse_args()
    atexit.register(buildFinished)
    failed_options = []

    if options.all:
      total_build_start_time = time.time()
      for option in config_helper.all_possible_build_options():
        did_success = buildWebKitGtk(option)
        if not did_success:
          failed_options.append(option)
      total_build_time = round(time.time() - total_build_start_time)
      print "Elapsed total build time: " + str(timedelta(seconds=total_build_time))
    else:
      did_success = buildWebKitGtk(options)
      if not did_success:
        failed_options.append(options)

    for option in failed_options:
      print "Build Failed: " + str(option)

    if options.install:
      installWebKitGtk(options)


if __name__ == '__main__':
    main(sys.argv)


