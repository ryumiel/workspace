#!/usr/bin/env python

from build_config import ConfigHelper
import sys, argparse
from subprocess import call
from subprocess import check_call
import os.path
import atexit
import time

startTime = time.time()
config_helper = ConfigHelper()

jhbuildrc = config_helper.jhbuildrc

webkit_src_dir = os.path.join(config_helper.workspace_dir, 'WebKitGtk/')

debug_build_dir = os.path.join(config_helper.build_dir, 'Debug/')
release_build_dir = os.path.join(config_helper.build_dir, 'Release/')

def ensureBuildDir(options):
    if options.debug:
      target_dir = os.path.join(config_helper.build_dir, 'Debug/')
    elif not options.debug:
      target_dir = os.path.join(config_helper.build_dir, 'Release/')

    if target_dir is None:
      print "Error: Invalid build dir"
      sys.exit(2)

    if not os.path.exists(target_dir):
        os.makedirs(target_dir)
    return target_dir

def jhbuildCmd():
    return ["jhbuild", "-f", jhbuildrc, "run"]

def runCMake(options):
    working_dir = ensureBuildDir(options)
    os.chdir(working_dir)

    cmakeargs = ["-DPORT=GTK", "-GNinja", "-DDEVELOPER_MODE=ON"]
    # Enable threaded compositor always for now
    cmakeargs.append("-DENABLE_THREADED_COMPOSITOR=ON")
    cmakeargs.append("-DENABLE_ACCELERATED_2D_CANVAS=ON")
    # Enable Gstreamer GL always for now
    cmakeargs.append("-DUSE_GSTREAMER_GL=ON")
    #cmakeargs.append("-DUSE_REDIRECTED_XCOMPOSITE_WINDOW=OFF")

    cmakeargs.append("-DCMAKE_INSTALL_PREFIX=" + config_helper.install_dir)
    cmakeargs.append("-DCMAKE_INSTALL_LIBDIR=lib")

    if options.debug:
        # Turn of debug fission for icecc
        cmakeargs.append("-DCMAKE_BUILD_TYPE=Debug")
        cmakeargs.append("-DDEBUG_FISSION=OFF")
    else:
        cmakeargs.append("-DCMAKE_BUILD_TYPE=Release")

    cmakeCommand = jhbuildCmd() + ["cmake", webkit_src_dir] + cmakeargs
    setEnvForClang()
    call(cmakeCommand)

def installWebKitGtk(options):
    working_dir = ensureBuildDir(options)
    os.chdir(working_dir)
    installCommand = jhbuildCmd() + ["cmake", "-P", working_dir + '/cmake_install.cmake']
    call(installCommand)

def buildWebKitGtk(options):
    runCMake(options)
    working_dir = ensureBuildDir(options)
    os.chdir(working_dir)

    setEnvForClang()
    buildCommand = jhbuildCmd() + ["ninja-build", "-j38"]
    call(buildCommand)

def buildFinished():
    elapsedTime = round(time.time() - startTime)
    if elapsedTime > 30:
      call(["/usr/bin/aplay", "-q", config_helper.build_finished_sound_file])

def setEnvForClang():
    os.environ["CC"]="clang"
    os.environ["CXX"]="clang++"
    os.environ["CCACHE_CPP2"]="yes"
    os.environ["ICECC_VERSION"]=config_helper.config['icecc_version']

def main(argv):
    argParser = argparse.ArgumentParser(description='Build webkit using custom jhbuild env')
    argParser.add_argument('--debug', action='store_true', default=False, help='Compile with Debug configuration (default: Release)')
    argParser.add_argument('--analyze', action='store_true', help='Enable static analysis [Not yet]')
    argParser.add_argument('--install', action='store_true', default=False, help='Install Webkit to jhbuild')

    options = argParser.parse_args()
    atexit.register(buildFinished)
    buildWebKitGtk(options)

    if options.install:
      installWebKitGtk(options)


if __name__ == '__main__':
    main(sys.argv)


