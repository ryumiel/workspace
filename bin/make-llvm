#!/usr/bin/env python

from build_config import ConfigHelper
import sys
from subprocess import call
from subprocess import check_output
import atexit
import time
import os.path
import shutil
import git
from git import RemoteProgress
import re

startTime = time.time()
config_helper = ConfigHelper()

llvm_build_dir = os.path.join(config_helper.build_dir, 'llvm')
llvm_src_dir = os.path.join(config_helper.workspace_dir, 'llvm')

mkDict = lambda srcDir, remoteUrl: {
  'srcDir': os.path.join(config_helper.workspace_dir,srcDir),
  'remoteUrl': remoteUrl,
  'gitRepo': None
}

repoList = [
  mkDict('llvm/', 'git@github.com:llvm-mirror/llvm.git'),
  mkDict('llvm/tools/clang/', 'git@github.com:llvm-mirror/clang.git'),
  mkDict('llvm/tools/clang/tools/extra', 'git@github.com:llvm-mirror/clang-tools-extra.git'),
  mkDict('llvm/tools/lldb/', 'git@github.com:llvm-mirror/lldb.git'),
  mkDict('llvm/project/compiler-rt/', 'git@github.com:llvm-mirror/compiler-rt.git'),
  mkDict('llvm/project/libcxx/', 'git@github.com:llvm-mirror/libcxx.git'),
]

version = 'release_39'

class GitProgress(RemoteProgress):
  def line_dropped(self, line):
    print line
  def update(self, op_code,*args):
    if op_code is RemoteProgress.BEGIN:
      sys.stdout.write("\n\r" + self._cur_line)
    elif op_code is RemoteProgress.END:
      print self._cur_line
    else:
      sys.stdout.write("\r" + self._cur_line)

def buildFinished():
  elapsedTime = round(time.time() - startTime)
  if elapsedTime > 30:
    call(["/usr/bin/aplay", "-q", config_helper.build_finished_sound_file])

def cloneFromOrigin(repo):
  print "Cloning " + repo['remoteUrl'] + " into " + repo['srcDir']
  repo['gitRepo'] = git.Repo.clone_from(repo['remoteUrl'], repo['srcDir'], GitProgress())
  print "Finished to clone " + repo['remoteUrl'] + " into " + repo['srcDir']

def ensureRepo(repo):
  try:
    repo['gitRepo'] = git.Repo(repo['srcDir'])
  except:
    repo['gitRepo'] = None

  if repo['gitRepo'] is None:
    cloneFromOrigin(repo)

def selectBranches(repo):
  git = repo['gitRepo']
  origin = git.remote()
  origin.fetch(progress=GitProgress())

  if git.head.commit != origin.refs[version].commit:
    origin.refs[version].checkout(force = True, b=version)
    print origin.refs[version]
  else:
    print repo['srcDir'] + " is already updated to " + version


def checkoutLLVM():
  for repo in repoList:
    ensureRepo(repo)
    selectBranches(repo)

def ensureBuildDir():
  if not os.path.exists(llvm_build_dir):
    os.makedirs(llvm_build_dir)
  return llvm_build_dir

def setEnvForLLVMBuild():
    os.environ["CC"]="gcc"
    os.environ["CXX"]="g++"
    os.environ["CCACHE_DISABLE"]="1"

def runCMake():
  working_dir = ensureBuildDir()
  os.chdir(working_dir)

  cmakeargs = ["-DCMAKE_BUILD_TYPE=Release", "-GNinja"]
  cmakeargs.append("-DLLVM_TARGETS_TO_BUILD=X86")
  cmakeargs.append("-DLLVM_INCLUDE_EXAMPLES=OFF")
  cmakeargs.append("-DCMAKE_INSTALL_PREFIX=" + config_helper.llvm_install_prefix)

  cmakeargs.append("-DLLVM_ENABLE_BACKTRACES=OFF")
  cmakeargs.append("-DLLVM_ENABLE_CRASH_OVERRIDES=OFF")
  cmakeargs.append("-DLLVM_ENABLE_ASSERTIONS=OFF")
  cmakeargs.append("-DLLVM_INCLUDE_DOCS=OFF")
  cmakeargs.append("-DLLVM_INCLUDE_TESTS=OFF")
  cmakeargs.append("-DLLVM_LIBDIR_SUFFIX=64")

  cmakeCommand = ["cmake", llvm_src_dir] + cmakeargs
  setEnvForLLVMBuild()
  call(cmakeCommand)

def buildLLVM():
  os.chdir(llvm_build_dir)
  buildCommand = ["ninja-build", "-j38"]
  call(buildCommand)

def installLLVM():
  os.chdir(llvm_build_dir)
  installCommand = ["sudo", "cmake", "-P", llvm_build_dir + '/cmake_install.cmake']
  call(installCommand)

def createICECCEnv():
  print "Creating Icecream toolchain"
  createEnvCmd = ['/usr/libexec/icecc/icecc-create-env', '--clang', config_helper.llvm_install_prefix + '/bin/clang', '/usr/libexec/icecc/compilerwrapper', '--addfile', '/usr/bin/objcopy']
  output = check_output(createEnvCmd)
  print output
  generatedEnv = re.search(r'creating ([0-9a-f]+.tar.gz)', output)
  if generatedEnv is None:
    print "Failed to find created env."
    sys.exit(2)

  generatedEnv = os.path.join(os.getcwd(), generatedEnv.group(1))
  envFileName = os.path.join(config_helper.resource_dir, "icecc_" + version + "_env.tar.gz")
  shutil.move(generatedEnv, envFileName)
  config_helper.config['icecc_version'] = envFileName
  config_helper.write_config_to_file()

def main(argv):
  atexit.register(buildFinished)
  #checkoutLLVM()
  runCMake()
  buildLLVM()
  installLLVM()
  createICECCEnv()

if __name__ == '__main__':
  main(sys.argv)


