#!/usr/bin/env python

from build_config import ConfigHelper
import argparse
import atexit
import datetime
import os
import psutil
import pyperclip
import signal
import subprocess
import sys

config_helper = ConfigHelper()

def process_info_str(proc):
  info_str = "pid: " + str(proc.pid)
  info_str += " ctime: " + datetime.datetime.fromtimestamp( proc.create_time()).strftime("%H:%M:%S")

  if proc.parent() is not None:
    info_str += " pname: " + proc.parent().name()

  info_str += " exe: " + proc.exe()
  return info_str

def select_target_process(proc_list):
  if len(proc_list) == 1:
    return proc_list[0]['proc']

  for proc in proc_list:
    proc['desc'] = process_info_str(proc['proc'])

  for proc in proc_list:
    print str(proc['sid']) + " : " + proc['desc']
  choice = raw_input('Enter your choice : ')
  choice = int(choice)

  proc_list = filter(lambda x: x['sid'] == choice, proc_list)
  if len(proc_list) is not 1:
    print "Unable to select unique process"
    sys.exit(2)
  return proc_list[0]['proc']

def find_process(proc_name):
  process_list = []
  mkDict = lambda sid, proc, desc: {
    'sid' : sid,
    'proc': proc,
    'desc': desc
  }

  i = 0;
  for proc in psutil.process_iter():
    if proc.name() == proc_name and ((config_helper.workspace_dir in proc.exe()) or (config_helper.custom_build_dir in proc.exe())):
      process_list.append(mkDict(i, proc, ""))
      i += 1
  return process_list

class GDB():
  def handle_sigint(self, signum, frame):
    print "SIGINT received!"
    print self.gdb_ps
    self.gdb_ps.send_signal(signal.SIGINT)

  def run(self):
    signal.signal(signal.SIGINT, self.handle_sigint)
    self.gdb_ps = subprocess.Popen(self.gdb_cmd)
    self.gdb_ps.wait()

  def __init__(self, options):
    if options.wpe:
      webprocess_name = 'WPEWebProcess'
    else:
      webprocess_name = 'WebKitWebProcess'

    process_list = find_process(webprocess_name)
    if len(process_list) < 1:
      print "Unable to find target process"
      sys.exit(0)

    proc = select_target_process(process_list)

    if options.mem:
      subprocess.call(['ps_mem.py', '-p', str(proc.pid), '-w', '1'])
      exit(0)

    gdbinit = os.path.join(config_helper.get_project_settings_dir(options.wpe), "gdbinit")
    sourcepath = os.path.join(os.path.dirname(proc.exe()), "../")

    common_args_gdb = [str(proc.exe()), "--init-command", gdbinit, "-ex", "\"load-webkit\"", "-pid", str(proc.pid), "-cd=" + sourcepath, "-q"]
    if options.cgdb:
      self.gdb_cmd = ["cgdb", "--"] + common_args_gdb
      print ' '.join(self.gdb_cmd)
      pyperclip.copy(' '.join(self.gdb_cmd));
    else:
      self.gdb_cmd = ["gdb", "-i=mi"] + common_args_gdb
      sys.stdout.write(' '.join(self.gdb_cmd));

def main(argv):
  arg_parser = argparse.ArgumentParser(description='Webkit dev script using custom jhbuild env')
  arg_parser.add_argument('--cgdb', action='store_true', default=False, help='execute CGDB')
  arg_parser.add_argument('--wpe', action='store_true', default=False, help='find WPE')
  arg_parser.add_argument('--mem', action='store_true', default=False, help='execute CGDB')
  options = arg_parser.parse_args()
  gdb = GDB(options)
  #if (options.cgdb):
    #gdb.run()

if __name__ == '__main__':
  main(sys.argv)


