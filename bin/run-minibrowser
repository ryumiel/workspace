#!/usr/bin/env python

from build_config import ConfigHelper
from subprocess import call
from subprocess import Popen
from subprocess import check_output
import os
import sys
import psutil
import argparse
import atexit

config_helper = ConfigHelper()

def get_argument_parser():
  argParser = argparse.ArgumentParser(description='Webkit dev script using custom jhbuild env')
  argParser.add_argument('--release', action='store_false', dest='debug', default=False, help='Compile with Debug configuration (default: Release)')
  argParser.add_argument('--debug', action='store_true', default=False, help='Compile with Debug configuration (default: Release)')
  argParser.add_argument('--gdb', action='store_true', default=False, help='execute gdb for MiniBrowser')
  argParser.add_argument('--pause', action='store_true', default=False, help='Pause WebKitWebProcess to attache gdb')
  argParser.add_argument('--test', action='store_true', default=False, help='execute WebKitTestRunner instead of MiniBrowser')
  argParser.add_argument('--weston', action='store_true', default=False, help='Open MiniBrowser inside of Weston (default: False)')
  argParser.add_argument('--scale', type=int, default=0, help='Apply custom device scale using nested compositor (defaule: use current compositor)')

  argParser.add_argument('--custom', action='store_true', default=False, help='Use custom jhbuild environment for MiniBrowser')
  argParser.add_argument('--wpe', action='store_true', dest='wpe', default=False, help='Run WebKitWPE via dyz (default: False)')
  argParser.add_argument('--force-compositing', action='store_true', default=False, help='Force compositing mode (default: False)')
  argParser.add_argument('--disable-compositing', action='store_true', default=False, help='Disable compositing mode (default: False)')

  argParser.add_argument('--wrapper', help='The wrapper to analize WebProcess. (e.g. valgrind)')
  argParser.add_argument('args', nargs=argparse.REMAINDER, help='Arguments for Minibrowser or WebKitTestRunner')
  return argParser

def main(argv):
  argParser = get_argument_parser()
  options = argParser.parse_args()

  if options.args:
    args = filter(lambda a: a != '--', options.args)
  else:
    args = ['http://localhost:8000']

  environment = os.environ
  if options.wpe:
    options.custom = True

  if options.weston:
    is_weston_running = False
    for proc in psutil.process_iter():
      if proc.name() == "weston":
        is_weston_running = True

    if not is_weston_running:
      print "Please run weston using run-weston script"
      exit(1)

    config_helper.set_weston_env_for_client(environment)

  else:
    if not options.custom:
      os.environ["GDK_BACKEND"] = "x11"
    if options.scale is 0:
      ret = check_output(["gsettings", "get", "org.gnome.desktop.interface", "scaling-factor"])
      scale = [int(s) for s in ret.split() if s.isdigit()][0]
    else:
      scale = options.scale
    if scale is not 0:
      os.environ["GDK_SCALE"] = str(options.scale)

  #if options.llvmpipe:
  #  config_helper.set_llvmpipe_env(environment)

  if options.pause:
    os.environ["WEBKIT2_PAUSE_WEB_PROCESS_ON_LAUNCH"] = "1"

  if options.force_compositing:
    os.environ["WEBKIT_FORCE_COMPOSITING_MODE"] = "1"
  elif options.disable_compositing:
    os.environ["WEBKIT_DISABLE_COMPOSITING_MODE"] = "1"

  if options.wrapper:
    os.environ["WEB_PROCESS_CMD_PREFIX"] = options.wrapper

  if options.wpe:
    os.environ["WEBKIT_EXEC_PATH"] = os.path.join(config_helper.get_webkit_dir(options, options.custom), "bin")
    os.environ["LUA_PATH"] = os.path.join(config_helper.dyz_dir, "src/?.lua")

    local_library_path = os.environ.get("LD_LIBRARY_PATH", "")
    os.environ["LD_LIBRARY_PATH"] = os.path.join(config_helper.get_webkit_dir(options, options.custom), "lib") + ":" + local_library_path
    minibrowser = os.path.join(config_helper.dyz_dir, "src/main")
  else:
    minibrowser = os.path.join(config_helper.get_webkit_dir(options, options.custom), 'bin/MiniBrowser')

  if options.gdb:
    gdbinit = os.path.join(config_helper.get_project_settings_dir(options.wpe), "gdbinit")
    cmd = ["cgdb", "--", "-init-command", gdbinit, "--args", minibrowser] + args
  elif options.test:
    base_workdir = config_helper.get_webkit_dir(options, options.custom)
    print base_workdir
    testRunner = os.path.join(base_workdir, 'bin/WebKitTestRunner')
    os.environ["TEST_RUNNER_INJECTED_BUNDLE_FILENAME"] = os.path.join(base_workdir, 'lib/libTestRunnerInjectedBundle.so')
    os.environ["TEST_RUNNER_TEST_PLUGIN_PATH"] = os.path.join(base_workdir, 'lib/plugins')
    cmd = [testRunner] + args
  else:
    cmd = [minibrowser] + args

  os.environ["WEBKIT_SHOW_COMPOSITING_DEBUG_VISUALS"] = "1"
  if not options.custom:
    jhbuild_cmd = [config_helper.jhbuild_wrapper, "--gtk", "run"]
  else:
    jhbuild_cmd = ["jhbuild", "-f", config_helper.jhbuildrc, "run"]

  jhbuild_cmd.extend(cmd)
  call(jhbuild_cmd)

if __name__ == '__main__':
  main(sys.argv)


